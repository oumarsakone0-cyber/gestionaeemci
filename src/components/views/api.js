import axios from "axios"

// Configuration de base
const API_BASE_URL = "https://sastock.com/api"

// Configuration Axios avec CORS
const apiClient = axios.create({
  baseURL: API_BASE_URL,
  timeout: 30000,
  headers: {
    "Content-Type": "application/json",
    Accept: "application/json",
    "X-Requested-With": "XMLHttpRequest",
  },
  withCredentials: false,
})

// Intercepteur de requ√™te
apiClient.interceptors.request.use(
  (config) => {
    console.log("üîÑ Requ√™te API:", {
      method: config.method?.toUpperCase(),
      url: config.url,
      baseURL: config.baseURL,
      params: config.params,
      data: config.data ? "Donn√©es pr√©sentes" : "Pas de donn√©es",
    })
    return config
  },
  (error) => {
    console.error("‚ùå Erreur de configuration requ√™te:", error)
    return Promise.reject(error)
  },
)

// Intercepteur de r√©ponse
apiClient.interceptors.response.use(
  (response) => {
    console.log("‚úÖ R√©ponse API re√ßue:", {
      status: response.status,
      statusText: response.statusText,
      data: response.data,
    })
    return response
  },
  (error) => {
    console.error("‚ùå Erreur de r√©ponse:", error)

    if (error.code === "ERR_NETWORK") {
      console.log("üåê Erreur r√©seau - Probl√®me CORS ou serveur inaccessible")
      console.log("üîç URL tent√©e:", error.config?.url)
      console.log("üîç M√©thode:", error.config?.method)
      throw new Error(
        "Impossible de se connecter au serveur. V√©rifiez que le serveur est accessible et que CORS est configur√© correctement.",
      )
    }

    if (error.response) {
      console.log("üìä D√©tails de l'erreur serveur:", {
        status: error.response.status,
        statusText: error.response.statusText,
        data: error.response.data,
      })
      throw new Error(`Erreur serveur ${error.response.status}: ${error.response.statusText}`)
    }

    throw error
  },
)

// Fonctions utilitaires pour les membres
export const membreUtils = {
  // Formatage du num√©ro de t√©l√©phone
  formatPhoneNumber: (phone) => {
    if (!phone) return ""
    const cleaned = phone.replace(/\D/g, "")
    const match = cleaned.match(/^(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})$/)
    if (match) {
      return `${match[1]} ${match[2]} ${match[3]} ${match[4]} ${match[5]}`
    }
    return phone
  },

  // Validation des donn√©es de membre
  validateMembreData: (data) => {
    const errors = []

    if (!data.prenom) errors.push("Le pr√©nom est requis")
    if (!data.nom) errors.push("Le nom est requis")
    if (!data.dateNaissance) errors.push("La date de naissance est requise")
    if (!data.lieuNaissance) errors.push("Le lieu de naissance est requis")
    if (!data.contact) errors.push("Le contact est requis")
    if (!data.sexe) errors.push("Le sexe est requis")
    if (!data.srDebut) errors.push("Le secr√©tariat de d√©but est requis")
    if (!data.sousComite) errors.push("Le sous-comit√© est requis")
    if (!data.anneeDebut) errors.push("L'ann√©e de d√©but est requise")
    if (!data.statut) errors.push("Le statut est requis")

    return {
      isValid: errors.length === 0,
      errors,
    }
  },

  // Formatage des donn√©es pour l'API
  formatDataForAPI: (formData) => {
    return {
      prenom: formData.prenom?.trim(),
      nom: formData.nom?.trim().toUpperCase(),
      date_naissance: formData.dateNaissance,
      lieu_naissance: formData.lieuNaissance?.trim().toUpperCase(),
      contact: formData.contact?.replace(/\s/g, ""),
      sexe: formData.sexe,
      sr_debut: formData.srDebut,
      sous_comite: formData.sousComite?.trim().toUpperCase(),
      annee_debut: Number.parseInt(formData.anneeDebut),
      statut: formData.statut,
      secretariat_poste: formData.secretariatPoste,
      poste: formData.poste,
      commune_ville: formData.communeVille?.trim().toUpperCase(),
      section: formData.section?.trim().toUpperCase(),
      photo_url: formData.photoCloudinaryUrl,
      photo_public_id: formData.photoCloudinaryPublicId,
      numero_wave: formData.numeroWave?.replace(/\s/g, ""),
      created_at: new Date().toISOString(),
    }
  },
}

// API pour la gestion des membres
export const carteMembreApi = {
  // Cr√©er un nouveau membre
  createMembre: async (membreData) => {
    try {
      console.log("üîÑ Cr√©ation d'un membre...")

      const response = await apiClient.post("/api-carte-membre-cors-fixed.php", membreData, {
        params: { action: "create_membre" },
      })

      if (response.data && response.data.success) {
        console.log("‚úÖ Membre cr√©√© avec succ√®s")
        return {
          success: true,
          data: response.data.data,
          message: response.data.message,
        }
      } else {
        console.error("‚ùå Erreur lors de la cr√©ation:", response.data?.error || "Erreur inconnue")
        return {
          success: false,
          error: response.data?.error || "Erreur lors de la cr√©ation du membre",
        }
      }
    } catch (error) {
      console.error("‚ùå Erreur lors de la cr√©ation du membre:", error.message)
      return {
        success: false,
        error: error.message,
      }
    }
  },

  // R√©cup√©rer les statistiques
  getStats: async () => {
    try {
      console.log("üîÑ R√©cup√©ration des statistiques...")

      const response = await apiClient.get("/api-carte-membre-cors-fixed.php", {
        params: { action: "get_stats" },
      })

      if (response.data && response.data.success) {
        console.log("‚úÖ Statistiques r√©cup√©r√©es")
        return {
          success: true,
          data: response.data.data,
        }
      } else {
        return {
          success: false,
          error: response.data?.error || "Erreur lors de la r√©cup√©ration des statistiques",
        }
      }
    } catch (error) {
      console.error("‚ùå Erreur lors de la r√©cup√©ration des statistiques:", error.message)
      return {
        success: false,
        error: error.message,
      }
    }
  },

  // R√©cup√©rer tous les membres
  getMembres: async (page = 1, limit = 10) => {
    try {
      console.log("üîÑ R√©cup√©ration des membres...")

      const response = await apiClient.get("/api-carte-membre-cors-fixed.php", {
        params: {
          action: "get_membres",
          page: page,
          limit: limit,
        },
      })

      if (response.data && response.data.success) {
        console.log("‚úÖ Membres r√©cup√©r√©s")
        return {
          success: true,
          data: response.data.data,
          pagination: response.data.pagination,
        }
      } else {
        return {
          success: false,
          error: response.data?.error || "Erreur lors de la r√©cup√©ration des membres",
        }
      }
    } catch (error) {
      console.error("‚ùå Erreur lors de la r√©cup√©ration des membres:", error.message)
      return {
        success: false,
        error: error.message,
      }
    }
  },

  // R√©cup√©rer un membre par ID
  getMembreById: async (id) => {
    try {
      console.log("üîÑ R√©cup√©ration du membre ID:", id)

      const response = await apiClient.get("/api-carte-membre-cors-fixed.php", {
        params: {
          action: "get_membre",
          id: id,
        },
      })

      if (response.data && response.data.success) {
        console.log("‚úÖ Membre r√©cup√©r√©")
        return {
          success: true,
          data: response.data.data,
        }
      } else {
        return {
          success: false,
          error: response.data?.error || "Membre non trouv√©",
        }
      }
    } catch (error) {
      console.error("‚ùå Erreur lors de la r√©cup√©ration du membre:", error.message)
      return {
        success: false,
        error: error.message,
      }
    }
  },

  // Mettre √† jour le statut de paiement
  updatePaiement: async (membreId, paiementData) => {
    try {
      console.log("üîÑ Mise √† jour du paiement pour le membre:", membreId)

      const response = await apiClient.post(
        "/api-carte-membre-cors-fixed.php",
        {
          membre_id: membreId,
          ...paiementData,
        },
        {
          params: { action: "update_paiement" },
        },
      )

      if (response.data && response.data.success) {
        console.log("‚úÖ Paiement mis √† jour")
        return {
          success: true,
          data: response.data.data,
        }
      } else {
        return {
          success: false,
          error: response.data?.error || "Erreur lors de la mise √† jour du paiement",
        }
      }
    } catch (error) {
      console.error("‚ùå Erreur lors de la mise √† jour du paiement:", error.message)
      return {
        success: false,
        error: error.message,
      }
    }
  },

  // V√©rifier l'unicit√© du matricule
  verifyMatricule: async (matricule) => {
    try {
      console.log("üîÑ V√©rification du matricule:", matricule)

      const response = await apiClient.get("/api-carte-membre-cors-fixed.php", {
        params: {
          action: "verify_matricule",
          matricule: matricule,
        },
      })

      if (response.data && response.data.success !== undefined) {
        console.log("‚úÖ V√©rification du matricule termin√©e")
        return {
          success: true,
          available: response.data.available,
        }
      } else {
        return {
          success: false,
          error: response.data?.error || "Erreur lors de la v√©rification du matricule",
        }
      }
    } catch (error) {
      console.error("‚ùå Erreur lors de la v√©rification du matricule:", error.message)
      return {
        success: false,
        error: error.message,
      }
    }
  },

  // G√©n√©rer une fiche PDF
  generateFiche: async (membreData) => {
    try {
      console.log("üîÑ G√©n√©ration de la fiche PDF...")

      const response = await apiClient.post("/api-carte-membre-cors-fixed.php", membreData, {
        params: { action: "generate_fiche" },
        responseType: "blob",
      })

      // Cr√©er un lien de t√©l√©chargement
      const url = window.URL.createObjectURL(new Blob([response.data]))
      const link = document.createElement("a")
      link.href = url
      link.setAttribute("download", `fiche_membre_${membreData.matricule_gen || "nouveau"}.pdf`)
      document.body.appendChild(link)
      link.click()
      link.remove()
      window.URL.revokeObjectURL(url)

      console.log("‚úÖ Fiche PDF g√©n√©r√©e et t√©l√©charg√©e")
      return {
        success: true,
        message: "Fiche PDF g√©n√©r√©e avec succ√®s",
      }
    } catch (error) {
      console.error("‚ùå Erreur lors de la g√©n√©ration de la fiche:", error.message)
      return {
        success: false,
        error: error.message,
      }
    }
  },

  // Test de connexion
  testConnection: async () => {
    try {
      console.log("üîÑ Test de connexion √† l'API...")

      const response = await apiClient.get("/api-carte-membre-cors-fixed.php", {
        params: { action: "test" },
      })

      if (response.data) {
        console.log("‚úÖ Connexion API r√©ussie")
        return {
          success: true,
          data: response.data,
          message: "Connexion r√©ussie",
        }
      } else {
        return {
          success: false,
          error: "Pas de r√©ponse du serveur",
        }
      }
    } catch (error) {
      console.error("‚ùå Erreur de connexion:", error.message)
      return {
        success: false,
        error: error.message,
      }
    }
  },
}

// Upload direct vers Cloudinary
export const uploadPhoto = async (file, progressCallback = null, description = "") => {
  try {
    console.log("üîÑ Upload vers Cloudinary...")

    // Validation du fichier
    if (!file) {
      throw new Error("Aucun fichier fourni")
    }

    if (!file.type.startsWith("image/")) {
      throw new Error("Le fichier doit √™tre une image")
    }

    if (file.size > 5 * 1024 * 1024) {
      // 5MB
      throw new Error("Le fichier ne peut pas d√©passer 5MB")
    }

    // Configuration Cloudinary
    const cloudName = "dqmhtibfm"
    const uploadPreset = "ml_default"

    // Cr√©er FormData
    const formData = new FormData()
    formData.append("file", file)
    formData.append("upload_preset", uploadPreset)
    formData.append("folder", "membres_aeemci")

    // Nom unique avec timestamp
    const timestamp = Date.now()
    const fileName = `membre_${timestamp}_${file.name.replace(/[^a-zA-Z0-9.]/g, "_")}`
    formData.append("public_id", `membres_aeemci/${fileName}`)

    if (description) {
      formData.append("context", `description=${description}`)
    }

    // Upload avec suivi de progression
    const response = await axios.post(`https://api.cloudinary.com/v1_1/${cloudName}/image/upload`, formData, {
      headers: {
        "Content-Type": "multipart/form-data",
      },
      onUploadProgress: (progressEvent) => {
        if (progressCallback) {
          const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total)
          progressCallback(percentCompleted)
        }
      },
    })

    if (response.data && response.data.secure_url) {
      console.log("‚úÖ Upload Cloudinary r√©ussi:", response.data.secure_url)
      return {
        success: true,
        data: {
          url: response.data.secure_url,
          public_id: response.data.public_id,
          width: response.data.width,
          height: response.data.height,
          format: response.data.format,
          bytes: response.data.bytes,
        },
      }
    } else {
      throw new Error("R√©ponse Cloudinary invalide")
    }
  } catch (error) {
    console.error("‚ùå Erreur upload Cloudinary:", error)

    if (error.response) {
      console.error("D√©tails erreur Cloudinary:", error.response.data)
      return {
        success: false,
        error: `Erreur Cloudinary: ${error.response.data.error?.message || "Erreur inconnue"}`,
      }
    }

    return {
      success: false,
      error: error.message || "Erreur lors de l'upload",
    }
  }
}

// Upload d'images g√©n√©riques
export const uploadImage = async (file, folder = "general", progressCallback = null) => {
  try {
    console.log("üîÑ Upload image vers Cloudinary...")

    // Validation
    if (!file || !file.type.startsWith("image/")) {
      throw new Error("Fichier image requis")
    }

    if (file.size > 5 * 1024 * 1024) {
      throw new Error("Fichier trop volumineux (max 5MB)")
    }

    // Configuration
    const cloudName = "dqmhtibfm"
    const uploadPreset = "ml_default"

    const formData = new FormData()
    formData.append("file", file)
    formData.append("upload_preset", uploadPreset)
    formData.append("folder", folder)

    // Nom unique
    const timestamp = Date.now()
    const fileName = `img_${timestamp}_${file.name.replace(/[^a-zA-Z0-9.]/g, "_")}`
    formData.append("public_id", `${folder}/${fileName}`)

    const response = await axios.post(`https://api.cloudinary.com/v1_1/${cloudName}/image/upload`, formData, {
      headers: { "Content-Type": "multipart/form-data" },
      onUploadProgress: (progressEvent) => {
        if (progressCallback) {
          const percent = Math.round((progressEvent.loaded * 100) / progressEvent.total)
          progressCallback(percent)
        }
      },
    })

    if (response.data?.secure_url) {
      console.log("‚úÖ Upload image r√©ussi")
      return {
        success: true,
        data: {
          url: response.data.secure_url,
          public_id: response.data.public_id,
          width: response.data.width,
          height: response.data.height,
        },
      }
    }

    throw new Error("R√©ponse Cloudinary invalide")
  } catch (error) {
    console.error("‚ùå Erreur upload image:", error)
    return {
      success: false,
      error: error.response?.data?.error?.message || error.message,
    }
  }
}

// Fonction utilitaire pour d√©boguer les probl√®mes CORS
export const debugCORSUtil = async () => {
  try {
    console.log("üîç Debug CORS - Test des headers...")

    // Test simple GET avec fetch natif
    const response = await fetch(`${API_BASE_URL}/api-carte-membre-cors-fixed.php?action=test`, {
      method: "GET",
      mode: "cors",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
    })

    console.log("‚úÖ Status:", response.status)
    console.log("‚úÖ Headers:", [...response.headers.entries()])

    const text = await response.text()
    console.log("‚úÖ Response:", text.substring(0, 500))

    return {
      success: true,
      status: response.status,
      headers: [...response.headers.entries()],
      preview: text.substring(0, 200),
    }
  } catch (error) {
    console.error("‚ùå Debug CORS √©chou√©:", error)
    return { success: false, error: error.message }
  }
}

// Fonction pour tester diff√©rentes m√©thodes de connexion
export const testMultipleMethodsUtil = async () => {
  const results = {}

  // Test 1: Fetch natif
  try {
    console.log("üîç Test 1: Fetch natif...")
    const response = await fetch(`${API_BASE_URL}/api-carte-membre-cors-fixed.php?action=test`)
    results.fetch = { success: true, status: response.status }
  } catch (error) {
    results.fetch = { success: false, error: error.message }
  }

  // Test 2: Axios
  try {
    console.log("üîç Test 2: Axios...")
    const response = await apiClient.get("/api-carte-membre-cors-fixed.php", {
      params: { action: "test" },
    })
    results.axios = { success: true, status: response.status }
  } catch (error) {
    results.axios = { success: false, error: error.message }
  }

  // Test 3: XMLHttpRequest
  try {
    console.log("üîç Test 3: XMLHttpRequest...")
    await new Promise((resolve, reject) => {
      const xhr = new XMLHttpRequest()
      xhr.open("GET", `${API_BASE_URL}/api-carte-membre-cors-fixed.php?action=test`)
      xhr.onload = () => {
        if (xhr.status === 200) {
          results.xhr = { success: true, status: xhr.status }
          resolve()
        } else {
          results.xhr = { success: false, error: `Status ${xhr.status}` }
          reject()
        }
      }
      xhr.onerror = () => {
        results.xhr = { success: false, error: "Network error" }
        reject()
      }
      xhr.send()
    })
  } catch (error) {
    if (!results.xhr) {
      results.xhr = { success: false, error: error.message }
    }
  }

  console.log("üìä R√©sultats des tests:", results)
  return results
}

// Export par d√©faut
export default {
  carteMembreApi,
  membreUtils,
  uploadPhoto,
  uploadImage,
  apiClient,
}

export { testConnection }
